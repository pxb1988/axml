package pxb.android;

import org.xmlpull.mxp1.MXParser;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.*;

public class GenerateR {
    public static void main(String... args) throws IOException, XmlPullParserException {

        URLConnection connection = new URL("https://raw.githubusercontent.com/android/platform_frameworks_base/master/core/res/res/values/public.xml")
                .openConnection();
        connection.connect();
        Map<Integer, String> attrs = new TreeMap<Integer, String>();
        List<String> extra = new ArrayList();
        MXParser parser = new MXParser();
        parser.setInput(connection.getInputStream(), "UTF-8");
        out:
        while (true) {
            switch (parser.next()) {
                case XmlPullParser.START_TAG:
                    if (parser.getName().equals("public")) {
                        if ("attr".equals(parser.getAttributeValue(null, "type"))) {
                            String id = parser.getAttributeValue(null, "id");
                            String name = parser.getAttributeValue(null, "name");
                            if (id == null) {
                                extra.add(name);
                            } else {
                                int iid = Integer.parseInt(id.substring(2), 16) & 0xFFFF;
                                attrs.put(iid, name);
                            }
                        }
                    }
                    break;
                case XmlPullParser.END_DOCUMENT:
                    break out;
            }
        }
        int lastIdx = 0;
        for (Map.Entry<Integer, String> e : attrs.entrySet()) {
            lastIdx = e.getKey();
        }
        for (String s : extra) {
            attrs.put(++lastIdx, s);
        }

        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream("R.java"), "UTF8")));
        out.println("package pxb.android.axml;");
        out.println("// DON'T MODIFY");
        out.println("// generated by pxb.android.GenerateR");
        out.println("// " + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()));
        out.println("public final class R {");
        out.println("    public static final class attr {");
        out.println("        private static final int ATTR_PREFIX = 0x01010000;");
        for (Map.Entry<Integer, String> e : attrs.entrySet()) {
            out.printf("        public static final int %s = ATTR_PREFIX | 0x%04x;\n", e.getValue(), e.getKey());
        }
        out.println("    }");

        out.println("    public static final class AttrNames {");
        out.println("        public static final String[] NAMES = new String [] {");

        for (int i = 0; i <= lastIdx; i++) {
            String name = attrs.get(i);
            if (name == null) {
                out.printf("        \"\", // reserved ? %04x\n", i);
            } else {
                out.printf("        \"%s\", // %04x\n", name, i);
            }
        }
        out.println("        };");
        out.println("    }");

        out.println("}");
        out.close();
    }
}
